#!/usr/bin/env node

!function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=5)}([function(e,t){e.exports=require("fs")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a={filepath:process.env.NODE_HIDE_FILEPATH||process.env["win32"==process.platform?"USERPROFILE":"HOME"]||".",filename:process.env.NODE_HIDE_FILENAME||"__node-hide-accounts",cryptography:{algorithm:process.env.CRYPT_ALGORITHM||"aes-256-ctr",password:process.env.CRYPT_SECRET||"hide"}};t.default=a},function(e,t){e.exports=require("path")},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=a(r(0)),i=a(r(2)),s=a(r(4)),o=a(r(1)),u=n.default.promises.mkdir,c=n.default.promises.writeFile,l=n.default.promises.readFile,d=s.default();t.default={filepath:i.default.join(o.default.filepath,o.default.filename),async upgradeFrom3To4(){if(this.doesDirectoryExist(o.default.filepath)&&this.doesFileExist(this.filepath)){const e=await l(this.filepath),t=await d.parseData(e.toString("utf8"),!1);if(1===t.toString("utf8").split(":").length){const e=JSON.parse(d.deprecated.decrypt(t.toString("utf8")));return await this.writeObjToFile(e),!0}}return!1},async getAndDecryptFlatFile(){if(this.doesDirectoryExist(o.default.filepath)){if(!this.doesFileExist(this.filepath))return await c(this.filepath,""),null;{const e=await l(this.filepath);if(0===e.length)return null;{const t=await d.parseData(e.toString("utf8"),!1);try{return JSON.parse(d.decrypt(t.toString("utf8")))}catch(e){throw`We're having a problem parsing your flat file at '${this.filepath}'.\n              This is likely due to a different master password, environment variable CRYPT_SECRET,\n              being used that previously was set. Make sure you have the correct\n              secret you used before and try again.`.replace(/\n\s+/g,"\n")}}}}return await u(o.default.filepath),await c(this.filepath,""),""},async writeObjToFile(e,t={}){const r=Object.assign(t,e),a=d.encrypt(JSON.stringify(r)),n=await d.parseData(a);return await c(this.filepath,n)},doesDirectoryExist(e){try{return n.default.statSync(e).isDirectory()}catch(e){return!1}},doesFileExist(e){try{return n.default.statSync(e).isFile()}catch(e){return!1}}}},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=a(r(10)),i=a(r(0)),s=r(11),o=a(r(12)),u=a(r(1)),c=i.default.promises.readFile,l=s.promisify(o.default.inflate),d=s.promisify(o.default.deflate);function f(e,t=32){return e.length<t?f(`${e}_${e}`,t):e.slice(0,t)}t.default=function(e={}){const t=e.algorithm||u.default.cryptography.algorithm,r=e.secret||u.default.cryptography.password;return{_algorithm:t,_secret:r,encrypt(e){const t=f(this._secret,this.getAlgorithmKeyLength()),{iv:r,key:a}=function(e){const t=n.default.randomBytes(16),r=e instanceof Buffer?e:Buffer.from(e);return{iv:t,key:r}}(t),i=n.default.createCipheriv(this._algorithm,a,r);let s=i.update(e,"utf8","hex");return s+=i.final("hex"),`${s}:${r.toString("hex")}`},async encryptFileUtf8(e){const t=await c(e,{encoding:"utf8"});return await this.encrypt(t)},decrypt(e){const[t,r]=e.split(":"),a=Buffer.from(r,"hex"),i=f(this._secret,this.getAlgorithmKeyLength()),s=i instanceof Buffer?i:Buffer.from(i),o=n.default.createDecipheriv(this._algorithm,s,a);let u=o.update(t,"hex","utf8");return u+=o.final("utf8"),u},async decryptFileUtf8(e){const t=await c(e,{encoding:"utf8"});return await this.decrypt(t)},stringToHash(e){const t=n.default.createHash("md5");return t.update(e),t.digest("hex")},fileToHash:async e=>await new Promise((t,r)=>{const a=n.default.createHash("md5"),s=i.default.createReadStream(e);s.on("data",e=>a.update(e)),s.on("error",r),s.on("end",()=>t(a.digest("hex")))}),async parseData(e,t=!0){switch(t){case!1:return await l(Buffer.from(e,"base64"));default:const t=await d(e);return Buffer.from(t).toString("base64")}},getAlgorithmKeyLength(){return{"des-ede3":24,aes128:16,"aes-128-cbc":16,aes192:24,aes256:32}[this._algorithm]},deprecated:{_algorithm:t,_secret:r,encrypt(e){const t=n.default.createCipher(this._algorithm,this._secret);let r=t.update(e,"utf8","hex");return r+=t.final("hex"),r},async encryptFileUtf8(e){const t=await c(e,{encoding:"utf8"});return this.encrypt(t)},decrypt(e){const t=n.default.createDecipher(this._algorithm,this._secret);let r=t.update(e,"hex","utf8");return r+=t.final("utf8"),r},async decryptFileUtf8(e){const t=await c(e,{encoding:"utf8"});return this.decrypt(t)}}}}},function(e,t,r){e.exports=r(6)},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=a(r(7)),i=a(r(0)),s=a(r(2)),o=a(r(8)),u=a(r(4)),c=a(r(3)),l=a(r(13)),d=a(r(15)),f=a(r(17)),p=a(r(1)),h=i.default.promises.writeFile,y=n.default(process.argv.slice(2)),[m,w,g]=y._;p.default.cryptography.password||["file","version"].includes(m)||(f.default.noCryptSecret(),process.exit()),(async()=>{try{const e=y.e||y.extra,t=y.n||y.name,a=y.p||y.password,n=y.i||y.id||y.uuid,i=y.u||y.username,g=y.t||y.text,_=y.f||y.file,b=u.default(),F=s.default.join(p.default.filepath,p.default.filename);switch(m){case"file":f.default.twoLinesDifferentColors("Your encrypted file is in the following location:",F,"blue","green");break;case"version":f.default.success(r(20)("package.json").version,!1);break;case"add":const m=t||w;if(!m)return f.default.error("An account name (-n or --name) parameter is a required at a minimum to add a new account.");await o.default.addAccount(m,i,a,e),f.default.success(`Successfully added account '${m}'!`);break;case"delete":if(!n)return f.default.error("A uuid (-i or --id or --uuid) is a required to delete an account.");if(await o.default.deleteAccountByUuid(n))return f.default.success(`Successfully deleted account with uuid: '${n}'`);f.default.error(`We didn't find an account with uuid: '${n}'`);break;case"search":const x=y.s||y.search||w,v=await c.default.getAndDecryptFlatFile(),A=await o.default.searchForAccountsByName(x,v),S=await o.default.searchForAccountsByUsername(x,v),O={matches:[].concat(A.matches).concat(S.matches).sort(o.default.sortByName).reduce((e,t)=>(-1===e.indexOf(t)&&e.push(t),e),[]),total:A.total};f.default.listAccounts(O.matches,O.total);break;case"show":if(n){const e=await o.default.findAccountByUuid(n);return e?(a||delete e.password,f.default.listSingleAccount(e)):f.default.error("We didn't find an account with uuid: "+n)}if(t||w){const e=t||w,r=await o.default.findAccountByName(e);return r?(a||delete r.password,f.default.listSingleAccount(r)):f.default.error("We didn't find an account with name: "+e)}f.default.error("Either a name (-n or --name) or uuid (-i or --id or --uuid) parameter is a required at a minimum to show the details for an account.");break;case"update":if(n){const r=await o.default.findAccountByUuid(n);return r?(await o.default.updateAccount(n,{name:t,username:i,password:a,extra:e},r),f.default.success(`Successfully updated account with uuid: '${n}'!`)):f.default.error("We didn't find an account with uuid: "+n)}if(t){const r=await o.default.findAccountByName(t);return r?(await o.default.updateAccount(r.uuid,{name:t,username:i,password:a,extra:e},r),f.default.success(`Successfully updated account with name: '${t}'!`)):f.default.error("We didn't find an account with name: "+t)}f.default.error("Either a name (-n or --name) or uuid (-i or --id or --uuid) parameter is a required at a minimum to show the details for an account.");break;case"upgrade":if(await c.default.upgradeFrom3To4())return f.default.success("Successfully upgraded your flat file to work with version 4+ of hide!");f.default.success("Your local file has already been upgraded to support 4+ version of hide.");break;case"decryptfile":if("yes"===(await d.default().ask("Are you sure you want to decrypt your file and save it to disk (yes/no): ")).toLowerCase()){const e=F+".json",t=await c.default.getAndDecryptFlatFile();await h(e,JSON.stringify(t)),f.default.success("Successfully saved your decrypted account data to:\n"+e)}break;case"recrypt":const D=s.default.join(p.default.filepath,p.default.filename),j=u.default({secret:w}),E=await c.default.getAndDecryptFlatFile(),T=j.encrypt(JSON.stringify(E)),P=await j.parseData(T);await h(D,P),f.default.success("Successfully updated your encrypted file with new secret to: "+D);break;case"import":const k=y.f||y.filepath||w;if(k&&c.default.doesFileExist(k)){let e=await l.default.csv(k),t=0,r=0;const a=e.length;for(;e.length>0;){const a=e.shift();a.name?(t++,await o.default.addAccount(a.name,a.username,a.password,a.extra)):r++}const n=`Successfully added ${t} accounts from CSV: ${k}!`,i=r>0?`Did not add ${r} accounts because we didn't see an account name ('name' CSV header).`:"";return f.default.twoLinesDifferentColors(n,i,"green","red"),f.default.singleLine(`Total number of rows in spreadsheet: ${a}\n`,"blue",0)}f.default.error("We can't find filepath provided: "+(k||"NO FILE PROVIDED"));break;case"encrypt":const B=g||w;let C;B?(C=b.encrypt(B),f.default.success(C)):_?(C=await b.encryptFileUtf8(_),f.default.success(C)):f.default.error("Please enter text (-t or --text) or a file path (-f or --file) to encrypt text.");break;case"decrypt":const N=g||w;let M;N?(M=b.decrypt(N),f.default.success(M)):_?(M=await b.decryptFileUtf8(_),f.default.success(M)):f.default.error("Please enter text (-t or --text) or a file path (-f or --file) to encrypt text.");break;default:f.default.error("I don't recognize what you are trying to do.\nPlease refer to the documentation for what commands I support.")}process.exit()}catch(e){"string"==typeof e?f.default.error(e):"TypeError: Bad input string"==e.toString()?(f.default.error(`Uh oh, The error we got is '${e.toString()}'\n\nThis usually means the CRYPT_SECRET is different for the info you're trying to decrypt than was used to encrypt it. Full stack trace below.`),console.log(e)):console.log(e),process.exit()}})()},function(e,t){e.exports=require("minimist")},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(9),i=a(r(3));t.default={createUuid:()=>n.v4(),async addAccount(e,t,r,a=""){const n={[this.createUuid()]:{name:e,username:t||"",password:r||"",extra:a||""}},s=await i.default.getAndDecryptFlatFile();return await i.default.writeObjToFile(n,s||{})},async updateAccount(e,t={},r={}){const a={[e]:{name:t.name||r.name||"",username:t.username||r.username||"",password:t.password||r.password||"",extra:t.extra||r.extra||""}},n=await i.default.getAndDecryptFlatFile();return await i.default.writeObjToFile(a,n||{})},async deleteAccountByUuid(e){let t=await i.default.getAndDecryptFlatFile();return!(!t||!t[e])&&(delete t[e],await i.default.writeObjToFile({},t),!0)},async findAccountByUuid(e){const t=await i.default.getAndDecryptFlatFile();return!(!t||!t[e])&&Object.assign(t[e],{uuid:e})},async findAccountByName(e){const t=await i.default.getAndDecryptFlatFile();if(!t)return!1;const r=Object.keys(t).filter(r=>t[r].name.toLowerCase()==e.toLowerCase())[0];return!!r&&Object.assign(t[r],{uuid:r})},async searchForAccountsByName(e,t){return await this.searchForAccountsByField("name",e,t)},async searchForAccountsByUsername(e,t){return await this.searchForAccountsByField("username",e,t)},async searchForAccountsByField(e,t,r){if(!(r=r||await i.default.getAndDecryptFlatFile()))return{matches:[],total:0};const a=Object.keys(r),n=a.length;return{matches:a.map(a=>{const n=r[a];if(!n)return null;if(t){const r=new RegExp(t,"i");return n[e]&&r.test(n[e])?Object.assign(n,{uuid:a}):null}return Object.assign(n,{uuid:a})}).filter(e=>!!e),total:n}},sortByName:(e,t)=>e.name.toLowerCase()<t.name.toLowerCase()?-1:1}},function(e,t){e.exports=require("uuid")},function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("util")},function(e,t){e.exports=require("zlib")},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=a(r(0)),i=a(r(14));t.default={csv:e=>new Promise((t,r)=>{const a=i.default({columns:!0});a.on("error",r),a.on("end",t),n.default.createReadStream(e).pipe(a)})}},function(e,t){e.exports=require("csv-parse")},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=a(r(16));t.default=function(){return{rl:n.default.createInterface({input:process.stdin,output:process.stdout}),ask(e,t=!0){return new Promise(r=>{this.rl.question(e,e=>{r(e),t&&this.close()})})},close(){this.rl.close()}}}},function(e,t){e.exports=require("readline")},function(e,t,r){"use strict";var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),r(18);const n=a(r(19)),i=()=>{};t.default={noCryptSecret(){this.wrapInNewlines(()=>{console.log("You don't have environment variable CRYPT_SECRET set.".red),console.log(">export CRYPT_SECRET=[your all time master secret value]".green)})},listSingleAccount(e){this.wrapInNewlines(()=>console.log(this.columnify([e]).green))},listAccounts(e=[],t=0){const r=e.map(e=>"string"==typeof e?{name:e}:(delete e.password,e));this.wrapInNewlines(()=>{console.log("I found the following accounts:".blue),console.log(this.columnify(r).green),console.log(`${e.length} of ${t} total accounts returned`.blue)})},twoLinesDifferentColors(e,t,r="blue",a="green"){this.wrapInNewlines(()=>{e.length>0&&console.log(e[r]),t.length>0&&console.log(t[a])})},singleLine(e,t="blue",r=1){this.wrapInNewlines(()=>console.log(e[t]),r)},success(e,t=!0){let r=e=>e();t&&(r=this.wrapInNewlines),r(()=>console.log(e.green))},error(e){this.wrapInNewlines(()=>console.log(e.red))},wrapInNewlines(e=i,t=1){const r=t-1>0?new Array(t-1).fill("\n").join(""):"";t>0&&console.log(r),e(),t>0&&console.log(r)},columnify:e=>n.default(e,{minWidth:15})}},function(e,t){e.exports=require("colors")},function(e,t){e.exports=require("columnify")},function(e,t){e.exports=require("root-require")}]);